# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bJceBN-7erZpd1aFqELpGzYOvg1sLmc4
"""

class node: 
  def __init__(self, data = None):
    self.data = data
    self.next = None 
    

class linkedlist:
  def __init__(self):
    self.head = node()
    
  def append(self,data):
    new_node = node(data)
    curr = self.head
    while curr.next!=None:
      curr=curr.next
    curr.next = new_node

  def insert_at(self, data, index):     
    new_node = node(data) 
    if(index < 1):
      print("\nOut of Range")
    elif (index == 1):
      new_node.next = self.head
      self.head = new_node
    else:    
      curr = self.head
      for i in range(1,index-1):
        if(curr != None):
          curr = curr.next   
      if(curr != None):
        new_node.next = curr.next
        curr.next = new_node  
      else:
          print("\nThe previous node is null.")

  def delete(self,data):
    curr = self.head
    while (curr.next.next):
      #second_last_node = curr.next
      curr = curr.next
    curr.next = None
  
  def display(self):
    curr = self.head
    if(curr != None):
      print("The list contains:", end=" ")
      while (curr != None):
        print(curr.data, end=" ")
        curr = curr.next
      print()
    else:
      print("The list is empty.")

my_list = linkedlist()

my_list.append(1)

my_list.append(2)

my_list.display()

my_list.insert_at(3,3)

my_list.display()